{"version":3,"sources":["Game.js","App.js","serviceWorker.js","index.js"],"names":["Game","state","gravity","lift","bird","x","y","velocity","radius","draw","ctx","refs","canvas","getContext","width","window","innerWidth","height","innerHeight","fillStyle","fillRect","beginPath","arc","Math","PI","fill","update","newV","setState","max","min","setInterval","document","addEventListener","e","keyCode","ref","Component","App","className","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yOAgEeA,E,2MA9DXC,MAAQ,CACJC,QAAS,GACTC,MAAO,GACPC,KAAM,CACFC,EAAG,GACHC,EAAG,IACHC,SAAU,EACVC,OAAQ,K,EAGpBC,KAAO,WACC,IAAMC,EAAM,EAAKC,KAAKC,OAAOC,WAAW,MACxCH,EAAIE,OAAOE,MAASC,OAAOC,WACjCN,EAAIE,OAAOK,OAASF,OAAOG,YACrBR,EAAIS,UAAY,QAChBT,EAAIU,SAAS,EAAG,EAAG,EAAKT,KAAKC,OAAOE,MAAO,EAAKH,KAAKC,OAAOK,QAC5DP,EAAIW,YACJX,EAAIS,UAAY,UAChBT,EAAIY,IAAI,EAAKrB,MAAMG,KAAKC,EAAG,EAAKJ,MAAMG,KAAKE,EAAG,EAAKL,MAAMG,KAAKI,OAAQ,EAAG,EAAIe,KAAKC,IAClFd,EAAIe,Q,EAEZC,OAAS,WACD,IAAIC,EAAyD,IAAjD,EAAK1B,MAAMG,KAAKG,SAAW,EAAKN,MAAMC,SAClD,EAAK0B,SAAS,CACZxB,KAAM,CACJC,EAAG,GACHC,EAAGiB,KAAKM,IACNN,KAAKO,IACH,EAAK7B,MAAMG,KAAKE,EAAIqB,EACpB,EAAKhB,KAAKC,OAAOK,OAAS,EAAKhB,MAAMG,KAAKI,QAE5C,GAEFD,SAAUoB,EACVnB,OAAQ,O,mFAIC,IAAD,OACZuB,aAAY,WACV,EAAKL,SACL,EAAKjB,SACJ,IAAO,IACXuB,SAASC,iBAAiB,WAAW,SAAAC,GAAC,OACrB,KAAdA,EAAEC,QAAiB,EAAKP,SAAS,CAC/BxB,KAAM,CACJC,EAAG,GACHC,EAAG,EAAKL,MAAMG,KAAKE,EACnBC,SAAU,EAAKN,MAAMG,KAAKG,SAAW,EAAKN,MAAME,KAChDK,OAAQ,MAEL,U,+BAIT,OACI,6BACI,4BAAQ4B,IAAI,SAAStB,MAAO,IAAKG,OAAQ,W,GA1DtCoB,aCcJC,G,uLARX,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,W,GAJUF,cCOEG,QACW,cAA7BzB,OAAO0B,SAASC,UAEe,UAA7B3B,OAAO0B,SAASC,UAEhB3B,OAAO0B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASb,SAASc,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e2b632a3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nclass Game extends Component {\n    state = {\n        gravity: 0.8,\n        lift: -20,\n        bird: {\n            x: 50,\n            y: 100,\n            velocity: 0,\n            radius: 10\n        }\n    }\ndraw = () => {\n        const ctx = this.refs.canvas.getContext(\"2d\");\n        ctx.canvas.width  = window.innerWidth;\n  ctx.canvas.height = window.innerHeight;\n        ctx.fillStyle = \"green\";\n        ctx.fillRect(0, 0, this.refs.canvas.width, this.refs.canvas.height);           \n        ctx.beginPath();\n        ctx.fillStyle = \"#FF0000\"; //red\n        ctx.arc(this.state.bird.x, this.state.bird.y, this.state.bird.radius, 0, 2 * Math.PI);\n        ctx.fill();\n    }\nupdate = () => {\n        let newV = (this.state.bird.velocity + this.state.gravity) * 0.9\n        this.setState({\n          bird: {\n            x: 50,\n            y: Math.max(\n              Math.min(\n                this.state.bird.y + newV,\n                this.refs.canvas.height - this.state.bird.radius\n              ),\n              0\n            ),\n            velocity: newV,\n            radius: 20\n          }\n        });\n    }\ncomponentDidMount() {\n        setInterval(() => {\n          this.update();\n          this.draw();\n        }, 1000 / 60);\n       document.addEventListener(\"keydown\", e =>\n          e.keyCode === 32 ? this.setState({ \n            bird: {\n              x: 50,\n              y: this.state.bird.y,\n              velocity: this.state.bird.velocity + this.state.lift,\n              radius: 40\n              }\n            }) : null\n        );\n    }\nrender() {\n        return (\n            <div>\n                <canvas ref=\"canvas\" width={450} height={650} />\n            </div>\n        );\n    }\n}\nexport default Game;","import React, { Component } from 'react';\nimport Game from './Game';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Game/>\n      </div>\n    );\n  }\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}